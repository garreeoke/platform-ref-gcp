apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: gcp.xk8s.platformref.upbound.io
  labels:
    cloud: gcp
spec:
  compositeTypeRef:
    apiVersion: platformref.upbound.io/v1alpha1
    kind: XK8s
  resources:
    - base:
        apiVersion: container.gcp.upbound.io/v1beta1
        kind: Cluster
        metadata:
          annotations: #patched
        spec:
          forProvider:
            initialNodeCount: 1
            removeDefaultNodePool: true
            #masterAuth:
            #  - clientCertificateConfig:
            #      - issueClientCertificate: true
            #masterAuthorizedNetworksConfig:
            #  - enabled: false
            ipAllocationPolicy:
              - useIpAliases: true
                clusterSecondaryRangeName: pods
                servicesSecondaryRangename: services
            loggingService: logging.googleapis.com/kubernetes
            #minMasterVersion: 1.22.11-gke.400
            monitoringService: monitoring.googleapis.com/kubernetes
            releaseChannel:
              - channel: UNSPECIFIED
      name: kubernetesCluster
      patches:
        - fromFieldPath: spec.version
          toFieldPath: spec.forProvider.minMasterVersion
        - fromFieldPath: spec.zone
          toFieldPath: spec.forProvider.location
        - fromFieldPath: metadata.annotations[crossplane.io/external-name]
          toFieldPath: metadata.annotations[crossplane.io/external-name]
        - fromFieldPath: metadata.uid
          toFieldPath: spec.writeConnectionSecretToRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-gkecluster"
        - fromFieldPath: metadata.labels[crossplane.io/claim-namespace]
          toFieldPath: spec.writeConnectionSecretToRef.namespace
        # Create this cluster in the Network and Subnetwork referenced by network ID
        - fromFieldPath: "spec.id"
          toFieldPath: spec.forProvider.networkSelector.matchLabels[networks.gcp.platformref.crossplane.io/network-id]
        - fromFieldPath: "spec.id"
          toFieldPath: spec.forProvider.subnetworkSelector.matchLabels[networks.gcp.platformref.crossplane.io/network-id]
      connectionDetails:
        - fromConnectionSecretKey: kubeconfig
    # Each cluster has one node pool. Its nodes are spread evenly across the zones
    # in which the cluster exists.
    - base:
        apiVersion: container.gcp.upbound.io/v1beta1
        kind: NodePool
        spec:
          forProvider:
            #location: us-west2
            clusterSelector:
              # Attach this node pool to the GKECluster created above.
              matchControllerRef: true
            nodeConfig:
              - diskType: pd-standard
                diskSizeGb: 100
                oauthScopes:
                  - https://www.googleapis.com/auth/cloud-platform
            management:
              - autoRepair: true
                autoUpgrade: false
            #version: 1.22.10-gke.600 # Put version in CRD?
      name: kubernetesNodePool
      patches:
        - fromFieldPath: spec.version
          toFieldPath: spec.forProvider.version
        - fromFieldPath: spec.zone
          toFieldPath: spec.forProvider.location
        - fromFieldPath: metadata.annotations[crossplane.io/external-name]
        - fromFieldPath: spec.parameters.nodes.size
          toFieldPath: spec.forProvider.nodeConfig[0].machineType
          transforms:
            - type: map
              map:
                small: n1-standard-4
                medium: n1-standard-16
                large: n1-standard-32
        - fromFieldPath: spec.parameters.nodes.count
          toFieldPath: spec.forProvider.initialNodeCount
        - fromFieldPath: spec.parameters.nodes.count
          toFieldPath: spec.forProvider.autoscaling[0].minNodeCount
        - fromFieldPath: spec.parameters.nodes.count
          toFieldPath: spec.forProvider.autoscaling[0].maxNodeCount
    - base:
        apiVersion: helm.crossplane.io/v1beta1
        kind: ProviderConfig
        spec:
          credentials:
            source: Secret
            secretRef:
              key: kubeconfig
      name: helm-providerConfig
      patches:
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
        - fromFieldPath: metadata.labels[crossplane.io/claim-namespace]
          toFieldPath: spec.credentials.secretRef.namespace
        - fromFieldPath: "metadata.uid"
          toFieldPath: spec.credentials.secretRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-gkecluster"
      readinessChecks:
        - type: None